javascript补全需要在用户目录设置.tern-config或者在项目根目录设置.tern-project文件。

ECMAScript区分大小写！

js标识符（命名可用字符）：
    第一个字符必须是字母、下划线或美元符号（$）。
    其它字符可以是字母、下划线、美元符号或数字。
    字母可以包含扩展的ASCII或UNICODE字母字符，但不推荐。

分号断句不一定必须，但最好不要省略。

{}：包裹代码块，把多条语句包括起来。

变量：
    js变量是松散类型的，即可以保存任何类型的数据。
    var标识局部变量声明。不加var则变成全局变量。（不推荐）
    变量声明在js中可多次重复，只有第一次有效。js会忽视其后的变量声明（但是初始化仍然有效）。

typeof:
    返回值（字符串）：
        undefined, boolean, string, number, object, function
    是操作符，可以加括号也可以不加，如：
        typeof 95
        typeof (95)
        typeof(95)

       | typeof            | condition            | result
    ---|-------------------|----------------------|-------------------------------------------
       | Array             | -                    | "object"
       | null              | -                    | "object"
       | Function          | -                    | "function"
       | 正则表达式        | 根据浏览器不同       | "object"（主流）/"function"
       | undefined         | -                    | "undefined"

undefined及未声明：
    声明但未赋值：undefined
    undefined变量可操作，未声明变量只可以进行typeof操作，否则抛出错误。
    但是，typeof {未声明变量} = undefined。容易误解
    null == undefined

boolean：
    ECMAScript中所有类型的值都有与boolean值等价的值。任何类型的值都可以通过调用Boolean()，转型为bool值。

         Boolean()   |         true                           false
    -----------------|------------------------------------------------------------------------
         String      |         非空                           ""（空字符串，长度为0）
         Object      |         非空对象                       null
         undefined   |         NaN                            undefined
         Number      |         非零值（包含+-Infinity）           0和NaN

Number：
    八进制：
        数值前面+0：045 = 37
        数值本身超过限制，则解析为十进制：079 = 79
    十六进制：
        数值前+0x
        数值：0~9，A~F，a~f。可大小写
    小数：
        1.01及.01都有效。.01=0.01，但不推荐
        3.12e7 = 3.12*10^7
        小数计算极其不精确！不要用==判断！！0.1+0.2=0.300000000000004？？
    数值范围：
        Number.MIN_VALUE --
Number.MAX_VALUE，超出则为Infinity。可用isFinite()判断。
    NaN：
        表示操作数不能返回（例如0/0）的情况。此情况会返回NaN，而不是抛出错误停止程序。js程序仍能继续运行。
        1/0 = Infinity    -1/0 = - Infinity
        NaN的任何操作返回NaN，且 NaN != NaN
        isNaN()：
            判断是否能转成数值
              isNaN()    |        true                      false
            -------------|--------------------------------------------------------------------------
              String     |        "10"                      "aaa"
              Object     |        x.valueOf()是数值         x.valueOf()不是数值
              Boolean    |        true,false                -
              undefined  |        -                         NaN,undefined

数值转换：

     Number()                     |      转换结果
----------------------------------|------------------------------------------------------
     Boolean                      |      1,0
     Number                       |      不变
     null                         |      0
     undefined                    |      NaN
     String（只有数字）           |      可包含“+、-”及浮点“.”，前缀0省略。
     String（十六进制）           |      有效十六进制变成相应十进制整数。
     String（空，长度可大于0）    |      0
     String（其它）               |      NaN
     Object                       |      先通过valueOf()转换，转值。如果得到NaN，则通过toString()转换，再转值。

    parseInt()：
        只处理字符串
        字符串前面可以多个空白，但第一个非空字符必须是数字或“-”负号
        扫描连续数字，直到非数字字符串为止
        截取有意义的数字格式转化
        小数点后省略（不是四舍五入）
        能够识别八进制、十六进制（ECMAScript 5不能识别八进制，会变成十进制）
        不能识别的字符串，则得到NaN
        可用第二个参数指定基数
        例：
            "-1234blue" = -1234

    parseFloat()：
        和parseInt()行为类似，只是多读取一个浮点号“.”
        不能解析八进制，前缀0被省略
        不能解析十六进制，所有十六进制数返回0。
        没有第二个参数作为基数。
        字符串为整数时，返回整数

String：
    转义：  | 
------------|---------------------------------------------------------------------------------------
     \n     |      换行
     \t     |      制表
     \b     |      空格
     \r     |      回车
     \f     |      进纸
     \\     |      斜杠\
     \'     |      单引号
     \"     |      双引号
     \xnn   |      十六进制码nn表示的一个字符（n在0-F间），例如\x41="A"
     \unnnn |      十六进制代码表示的一个unicode字符

    length属性：
        如果字符串包含双字节字符，则length可能不会精确返回字符数目

    字符串是不可改变的。改变变量值会销毁原字符串。

    toString():
        Number, Bool, Object, String 有 toString()方法，null和undefined没有。
        参数：n进制基数，仅用于数值，返回n进制的数值字符串。例如10.toString(8)="12".
        转型函数String(x)：参数x有toString()方法时，调用。否则，返回null或者undefined。

Object：
    初始化：var x = new Object() 或者 var x = new Object，括号可省略但不推荐！
    方法：                               |
-----------------------------------------|----------------------------------------------------------
     Constructor                         |       保存创建当前对象的函数
     hasOwnProperty(propertyName)        |       属性在实例中是否存在
     isPrototypeOf(object)               |       object是否是调用对象的原型
     propertyIsEnumerable(propertyName)  |       检查给定属性是否能用for-in枚举
     toLocaleString()                    |       返回对象字符串表示
     toString()                          |       返回对象字符串表示
     valueOf()                           |       返回对象的字符串、数值、或bool值表示。

单元操作符：
    前置、后置++：
        前置++语句求值前优先执行，后置++语句求值后执行。
        ++和--可作用于所有值：
         ++                    |     对应数值                               |     计算结果
-------------------------------|--------------------------------------------|-----------------------
         Number                |     Number                                 |     Number+1
         true                  |     1                                      |     2
         false                 |     0                                      |     1
         "11"（数字字符串）    |     对应数字                               |     数字+1
         "xx"（非数字）        |     NaN                                    |     NaN
         对象obj               |     valueOf(obj)，等于NaN则用toString()    |     用前述规则计算转换后值

    一元操作符+、-：
        放在非数值前时，会执行Number()转换。
 
位操作：
    正负表示：
        32位整数
        首位为符号位，0为负，1为正。
        负数表示法为二进制补码，即 -x = ~x+1

    NaN和Infinity被当作0.
    非数值在位操作前会先用Number()转成数值。
    
    按位非（~）
        数的负值-1（二进制反码）
    按位与（&）
    按位或（|）
    按位异或（^）
    左移（<<）
        左移的空位用0补足。保留符号位。
    右移（>>）
        右移的空位用符号位补足。保留符号位。
    无符号右移（>>>）
            
bool操作：
    逻辑非（!）
        操作时会先把值用Boolean()转换
    逻辑或（||）、 逻辑与（&&）
        a如果为true，则b不执行。

        Boolean(a)             | b        | a && b   | a || b
-------------------------------|----------|----------|------------------------------------            
        Boolean(a)=true        | any      | b        | a
        Boolean(a)=false       | any      | a        | b

加减乘除：
    乘法：

         a                  | b                | a * b
----------------------------|------------------|--------------------------------------------
         Number             | Number           | Number或+-Infinity
         NaN                | any              | NaN
         Infinity           | 0                | NaN
         Infinity           | Number           | +-Infinity
         obj                | any              | Number(a) * b
    
    除法：

         a                  | b                | a / b
----------------------------|------------------|--------------------------------------------
         Number             | Number           | Number或+-Infinity
         NaN                | any              | NaN
         Number             | 0                | NaN
         Infinity           | Number           | NaN
         Infinity           | Infinity         | NaN
         obj                | any              | Number(a) / b

    加法：

         a                  | b                | a + b
----------------------------|------------------|--------------------------------------------
         Number             | Number           | Number或+-Infinity
         NaN                | any              | NaN
         Infinity           | -Infinity        | NaN
         Infinity           | Number           | +-Infinity
         obj                | any              | Number(a) + b
         +0                 | +0               | +0
         -0                 | -0               | -0
         +0                 | -0               | +0
         String             | any              | String(a) + b

    减法：

         a                  | b                | a - b
----------------------------|------------------|--------------------------------------------
         Number             | Number           | Number
         NaN                | any              | NaN
         Infinity           | -Infinity        | Infinity
         Infinity           | Infinity         | NaN
         obj及非Number      | any              | Number(a) + b
         +0                 | +0               | +0
         -0                 | -0               | +0
         -0                 | +0               | -0
         String             | any              | String(a) + b

关系操作符：
    数值比较大小
    字符串比较字符编码值
    一个操作数为数值，则另一个取Number()再比较
    一个操作数为对象，则先valueOf()，没有此方法时再toString()。
    布尔值转为数值再比较。
    和NaN比较永远返回false。

    相等操作符：
        相等：

       | a                    | b                 | 转换
-------|----------------------|-------------------|-----------------------------------------
       | boolean              | Number            | Boolean转Number
       | String               | Number            | String转Number
       | Object               | 非Object          | 调Object的valueOf()方法
       | null                 | undefined         | 相等，两者不能转换成任何值，即不等于其它任何值
       | NaN                  | any               | 不想等，即使b也为NaN。
       | Object               | Object            | 两个引用是否指向同一个Object

        全等：
            只在不转换前相等，才为true
            null !== undefined

语句：
    循环语句：
        语句的条件会用Boolean()转换。
        for：
            for语句的初始化表达式、控制表达式、循环后表达式都可选。for(;;){}是正确语法。
            执行了循环体，则必执行循环后表达式。
        for-in：
            for (var name in object){}
            如果object为null或undefined，可能抛错误。ECMAScript 5不抛错误。
        label：和循环语句配套使用。
        switch：
            switch (expression) {
                case value: statement
                    break;
                ...
                default: statement
            }
            省略break会导致执行下一条case。
            value可以是变量或者表达式。
        
    with:
        限定语句的作用域。(不推荐使用)

函数：
    function不能重名，不像java可以重载。后定义函数会覆盖前面的。
    函数声明提升：执行代码前会先读取函数声明。
    arguments：
        可以通过arguments对象访问参数数组。类似数组的调用。（但arguments并不是Array的实例！）
        修改arguments会影响命名参数，但修改命名参数不会影响arguments。
        arguments的长度由传入的参数个数决定，而不是由定义的命名参数个数决定！因此，当arguments增加一个元素时，不会影响命名参数。
    命名参数：
        没传值的命名参数被赋值undefined。


变量、作用域、内存问题
    类型：
        字符串是基本类型！
        对象（包括数组）可以动态添加属性、方法 
        复制变量值：
            基本类型：值复制，相互独立
            引用类型（对象）：引用复制，相互影响。
                注意：虽然是复制引用，但实际上仍然是值传递！引用不会传递。即：
                    a=b
                    b={}
                    a!=b
                b的引用变了的话，a的引用不会变。

        instanceof：
            variable instanceof Constructor
            
            instanceof      type
            Array           Array
            正则表达式      RegExp
            
    执行环境、作用域：
        变量对象：
            每个执行环境都有一个相关的变量对象，保存环境定义的所有变量和函数。
            每个函数都有自己的执行环境，其活动对象作为变量对象。
            代码执行时会创建变量对象的一个作用域链，由一串变量对象组成。搜索变量从前到后。
        活动对象：
            在初次调用函数时，会产生函数的一个活动对象。
            活动对象会将this、arguments、其它命名参数保存。
            函数使用活动对象作为变量对象，保存到执行域链。
        全局执行环境：
            网页：window对象
            程序退出、网页关闭才销毁
        函数执行环境：
            执行逻辑进入函数时，函数环境被push到环境栈；执行后，弹出。
        作用域链：
            try-catch，with可以延长作用域链
        js没有块级作用域！
        声明变量时使用“var”声明，则变量添加到最近的环境。如果不使用“var”声明，则添加到全局环境。
            变量被访问时才添加。
        程序包含多个框架时，可存在多个全局执行环境。此时可能存在多个Array构造函数。
            instanceof Array 不一定取得正确的值
            Array.isArray(obj)可解决此问题，但并非所有浏览器都支持。
        圆括号不改变作用域：
            例如，object.getName()和(object.getName)()两者的执行域是一样的。
        
    垃圾回收：
        基本类型保存在栈，对象保存在堆。
        局部变量、对象会在程序退出局部执行环境时自动释放（“解除引用”）。
        全局变量和全局对象的属性在有必要的情况下，可显式“解除引用”：
            var globalVariable = new Object();
            ...
            globalVariable = null;
            通过将全局变量设为null，可以显式解除引用。

    引用类型（对象）：
        Object:
            表示法：
                new Object()
                {}
                {a:1, b:2} //最后不能加逗号。部分解析器可以识别，但不兼容
                {"a":1} // 属性可以加双引号
            方法：
                toLocaleString()
                toString()
                valueOf()
        Array：
            数组大小可动态调整。
            表示法：
                new Array()
                Array()  //可省略“new” 
                new Array(20)  //长为20
                new Array("a","b","c")  //元素为“a”，“b”，“c”
                ["a","b"]   //最后不要加逗号，不同解析器不兼容
                [,,]        //2或3个值为undefined的元素
            可对超出长度的index赋值，Index前的未赋值元素即为空值。

                方法值：
---------------------------------------|-----------------------------------------------------------
                toString()             | 逗号分隔字符串拼接
                valueOf()              | 数组本身
                toLocaleString()       | 调用数组中每一项的toLocaleString()方法，再拼接
                join()                 | 逗号分隔值
                push()                 | 栈推入，返回数组长度
                pop()                  | 栈弹出，返回弹出值
                shift()                | 队列出，返回移出值
                unshift()              | 队列前端入，返回长度
                reverse()              | 反转
                sort()                 | 排序，先调toString()，然后比较字符串。此时"5">"15"。
                                       | 可接收排序函数。arg1在arg2前则-1，后则+1，=则0
                concat()               | concat(a,b,c...)，入参为元素，加入。为数组，合并。返回副本。
                slice()                | 截取，不包含最后一项。返回副本。                                          
                splice()               | splice(startIndex, delNo, a, b, c ...)
                                       | startIndex：起始位置                                            
                                       | delNo：删除个数                                                 
                                       | a, b, c ...：在删除的位置上插入的元素                                   
                                       | 影响原数组，并返回被删除项组成的数组。
                indexof()              | indexOf(value, startIndex)：查找索引，无则返回-1。需要严格相等（全等）。
                lastIndexOf()          | 从末尾到前查找，其余和indexOf()相同。

            迭代：                     
                fn(element,index,array)：
                    element：各项
                    index：数组中位置
                    array：数组本身
                obj：
                    函数执行的域对象
                                       | 不会修改原数组，遍历数组元素，但不会遍历数组的属性。                   
---------------------------------------|------------------------------------------------------------
                every(fn,obj)          | 对每一项执行fn，如果所有执行结果为true，则返回true。
                filter(fn,obj)         | 对每一项执行fn，返回执行结果为true的元素数组。
                forEach(fn,obj)        | 对每一项执行fn，无返回值。
                map(fn,obj)            | 对每一项执行fn，返回结果数组。
                some(fn,obj)           | 对每一项执行fn，任一项返回true，则返回true。
       
            归并：
---------------------------------------|------------------------------------------------------------
                reduce(fn,start)       | fn(prev, cur, index, array)：
                                       | 当存在start时，prev初始值为start，cur初始值为array[0]，index初始值为0；
                                       | 不存在start时，prev初始值为array[0]，cur初始值为array[1]，index初始值为1。
                reduceRight(fn,start)  | 和reduce反方向遍历。

        Date：
            构造：
                new Date("Nov 18, 2016")
                new Date("11/18/20146")
                new Date(Date.parse("Nov 18, 2016"))
            值无法解析的话，不同解释器会有不同行为
            Date.UTC(year,month,day,hour,minute,second,millisecond)
                year: 当前年
                month: 0~11
                day: 1~31
                hour，minute, second,milisecond：表示法和通用表示一致
                只有year和month必要。day默认为1，其余默认为0.
                new Date(year,month...)：UTC表示法构造器
            Date.now() (不兼容老版本浏览器)
                == Date.parse(new Date().toString()) == +new Date() = new Date().valueOf()
            表示为字符串：
                toDateString()      省略时间，显示年月日
                toTimeString()      省略年月日，显示时间
                toLocaleDateString()        地区格式年月日
                toLocaleTimeString()        地区格式时分秒
                toUTCString()       UTC格式日期

        RegExp：
            expr：                       |            |                                
-----------------------------------------|------------|----------------------------------------
            /pattern/flags（字面量）     | 转义       | ECMAScript 3中指向同对象，ECMAScript 5中指向不同对象
            new RegExp(pattern, flags)   | 双重转义   | 指向不同对象

            flags：
                g：     全局模式，下一次匹配会从上一次匹配的末尾开始，而不是在第一个匹配停止，即lastIndex参数变成全局变量。
                i：     不区分大小写
                m：     多行模式
            元字符：
                必须转义
                () [] {} \ ^ $ | ? * + .
                表达式1种需要转义，表达式2中需要双重转义
            实例属性：
------------------------------|---------------|-------------------------------------------------
             global           | bool          | 是否设置g标志
             ignoreCase       | bool          | 是否设置i标志
             lastIndex        | int           | 上一次匹配的字符串开始位置
             multiline        | bool          | 是否设置m标志
             source           | string        | 正则表达式的字符串表示（即双重转义后）
            
            exec(str)：
                没有匹配时返回null。
                有匹配时返回一个数组。
                    数组中
                        第一个值：匹配整个模式的字符串
                        其余值：与模式中的捕获组匹配的字符串（当模式中包含捕获组时才存在）
                            其余值的第一个值和数组的第一个值重复
                    数组包含两个属性：
                        index：匹配项在字符串中的位置
                        input：入参str
            test(str)：
                返回是否匹配的bool值。注意g标志同样会造成全局lastIndex。
            toString()、toLocaleString()：返回字面量
                == "/" + regExp.source + "/" + flags
            valueOf()返回本身

            构造函数“静态”属性：
                （略），浏览器不兼容

函数：
    函数是对象，有属性和方法
    函数名是一个指向函数对象的指针
    函数声明：
        function test(){}
    函数表达式：
        var test = function(){}
    函数声明会被解析器预先读取，在执行任何代码前可用。函数表达式则在执行到所在代码行之前不可用。
    函数作为值：
        function callFunction(funcName, funcArg){
            return funcName(funcArg);
        }
    函数内部属性：
        arguments：
            包含所有入参
            callee属性：拥有此入参的函数
                function factorial(num){
                    if (num<=1)
                        return 1;
                    return num + factorial(num-1);
                }
                var newFactorial = factorial;
                factorial = function(){
                    return 0;
                }
                此时newFactorial受到factorial重赋值的影响！
                使用arguments.callee可避免此影响！            
        this：
            函数执行的环境对象。
            例如，浏览器全局函数时，this==window
        caller（ECMAScript 5）：
            调用此函数的函数（无则为null）

    函数属性：
        length：入参定义中参数个数
        prototype：继承自Object。在ECMAScript 5中，不能用for-in遍历。
    
    函数方法：
        apply(obj, args)：
            obj：设置为函数的执行域                    
            args：可为数组或者arguments对象，输入函数的参数。
        call(obj, arg1, arg2 ...)：
            obj：执行域
            arg1, arg2 ...：参数列表
        bind(obj)：
            ECMAScript 5限定
            返回函数实例，作用域被绑定到obj。
        toString()、toLocaleString()：
            返回函数代码（不同解释器行为不同）

包装类型：
    


对象：
    属性的内部属性（ECMAScript 5）：
        数据属性：
            Configurable：
                能否delete
                能否修改属性特性
                能否将属性修改为访问器属性
                一旦属性设为了不可配置，则无法再改回成可配置！
            Enumerable：
                能否用for-in访问
            Writable：
                能否写，即修改属性值
            Value：
                属性值，默认为undefined。
        访问器属性：
            Get：读属性值函数
            Set：写属性值函数
            访问器的函数可用于读写属性值。类似Java的setter和getter方法，可建立属性间的关联。
        属性操作方法：
            Object.defineProperty(obj, propertyName, config)：    
                内部属性不能直接修改，必须用Object.defineProperty()定义。
                obj          ： 对象
                propertyName ： 对象属性名
                config       ： 内部属性值对象，config对象的属性即为obj的内部属性。
            Object.defineProperties(obj, properties)：
                properties：属性对象。对象中每个属性为Object的一个属性的定义。
            Object.getOwnPropertyDescriptor(obj, propertyName)：获取属性内部属性定义，只能用于实例属性，不能用于原型属性。
    创建：
        工厂模式：使用函数直接创建对象，无法识别类型。
        构造函数：
            function Person(name){
                this.name = name;
            };
            var person = new Person("abc");
                没有return。
                使用了this。
                无需显式创建对象。
            构造函数和普通函数没有区别！任何函数，使用“new”关键字就成了构造函数，否则就是普通函数。此时this代表全局对象。
            构造函数中如果包含方法定义，则不同实例中方法为不同的对象。可通过方法外移解决此问题：
                function Person(name){
                    this.name = name;
                    this.sayName = sayName;
                };
                function sayName(){
                    alert(this.name);
                }
            但此时，sayName为全局函数，可被任意对象调用。失去了封闭性。于是需要原型模式。
        原型模式：
            所有函数都有一个原型对象。
                Person.prototype.sex = "female";
                Person.prototype.getSex = function(){
                    return this.sex;
                }
            原型对象的属性被所有函数创建的实例共享。
            原型对象默认constructor属性：指向构造函数。
            Person.prototype.isPrototypeOf(obj)：判断是否是原形对象
            Object.getPrototypeOf(obj)：获取obj的原型对象（ECMAScript 5）
            读取对象属性时，先搜索实例，再搜索原型。实例属性屏蔽原型属性，但不会复写。
            person.hasOwnProperty(propertyName)：只有当属性在实例中时才会返回true。原型中的属性会返回false（除非实例中存在覆盖）。
            in操作符：
                propertyName in obj：存在实例或原型属性，都返回true。
                for-in：返回所有可枚举属性，包含原型属性，以及屏蔽不可枚举原型属性的可枚举实例属性。但早期浏览器版本可能不满足此实现。
                Object.keys(obj)，Object.getOwnPropertyNames(obj)：返回obj的可枚举实例属性。
            对象字面量模式创造原型对象：
                Person.prototype = {
                    sex: "female"
                }
                此时constructor指向Object而不是Person！但instanceof操作仍然正确！需要显式指定constructor：
                Person.prototype = {
                    constructor: Person,
                    sex: "female"
                }
                此时注意constructor属性的内部属性发生变化，变成了可枚举属性！
                对象字面量模式等于重写原型对象（变成一个新的对象），会切断已建好的实例和新建原型之间的联系！
            原生引用类型：
                所有原生引用类型，都是采用原型模式创建的！可以通过修改原型为原生类型增加自定义方法。
            最佳实现：构造函数+原型模式混用，分别设置属性和方法。
                function Person(name){
                    this.name = name;
                }
                Person.prototype = {
                    constructor: Person,
                    getName: function(){
                        return this.name;
                    }
                }
            最佳实现2：动态原型创造：
                function Person(name){
                    this.name = name;
                    if (typeof this.getName != "function")
                        this.prototype.getName = function(){
                            return this.name;
                        }
                }
                注意此时不能使用对象字面量，否则if语句在第二次调用构造函数时才起效！
            特殊用途：寄生构造函数：
                function Male(name){
                    var person = new Person();
                    person.getSex = function(){
                        return "male";
                    }
                    return person;
                }
                用于在不改变原对象Person的情况下进行构造逻辑修改。实际上就是工厂模式。
                可用new关键字，但return的对象会覆盖new的对象。
            特殊用途2：稳妥构造函数：
                function Teacher(class){
                    var teacher = new Object();
                    teacher.getClass = function(){
                        return class;
                    }
                }
                不使用this和new关键字。class属性只能通过方法获取。
            寄生、稳妥构造模式instanceof不能正确执行。

    继承：
        原型链：
            function SuperType(){}
            function SubType(){}
            SubType.prototype = new SuperType();
            子对象的构造函数原型指针指向父对象，即父对象为子对象的原型。于是父、子对象的原型形成链。
            此时子对象原型的constructor指针指向父对象构造函数。
            instanceof、isPrototypeOf能正确检测父构造函数。
            注意不要使用对象字面量导致原型链被复写。
        借用构造函数/伪造对象/经典继承：
            function SubType(){
                SuperType.call(this,...);
            }
            这种模式，因为SuperType.call无法调用prototype，导致必须在SuperType构造函数中定义属性和方法。失去了原型的意义。
        组合继承/伪经典继承：
            通过原型链实现对原型属性和方法的继承，通过借用构造函数实现对实例属性的继承。
            function SuperType(name){
                this.name = name;
            }
            SuperType.prototype.getName = function(){
                return this.name;
            }
            function SubType(age){
                this.age = age;
                SuperType.call(this,name);
            }
            SubType.prototype = new SuperType();
        原型式继承：
            function createSub(obj){
                function F(){}
                F.prototype = obj;
                return new F();
            }
            ECMAScript通过Object.create(obj, properties)实现原型式继承。properties格式与Object.defineProperties()的第二个参数相同。
        寄生式继承：
            function createNew(obj){
                var sub = createSub(obj);     //复制
                sub.name = "fengyc";          //增强
                return sub;
            }
            不能做到函数复用。
        寄生组合式继承：
            function extendType(subType, superType){
                var proto = createSub(superType.prototype);
                proto.constructor = subType;
                subType.prototype = proto;
            }
            function SubType(name, age){
                this.age = age;
                SuperType.call(this,name);
            }
            extendType(SubType, SuperType);

函数表达式：
    递归：
        用arguments.callee实现递归。
            function factional(num){
                if (num<=1)
                    return 1;
                else
                    return num * arguments.callee(num-1);
            }
        用重命名实现递归：
            var factional = (function f(num){
                if (num<=1)
                    return 1;
                else
                    return num * f(num-1);
            });
    闭包：
        闭包指有权访问另一个函数作用域的函数。
        常见形式：在函数内部定义并返回另一个函数：
            function outer(a){
                return function inner(b){
                    return b+a;
                }
            }
        内部函数Inner始终能够访问外部函数outer的变量a。这是因为inner的作用域包含outer的作用域。
        函数创建时会预先创建一个包含全局变量对象的执行域链，并设置到[[scope]]属性。并在第一次调用时复制[[scope]]属性创建函数的执行域链，然后将自己的活动对象推入执行域链前端。
        内部函数创建时会将包含函数的活动对象添加到自己的作用域链中。inner被返回后，outer的活动对象不会被销毁，因为inner还引用它。直到inner本身被销毁后，outer的活动对象才被销毁。
        闭包只能访问包含函数中任何对象的最后一个值：
            function funcList(){
                var result = [];
                for (var i=0;i<10;i++)
                    result = function(){
                        return i;
                    }
                return result;
            }
            此时result中所有函数都只能返回10.
        闭包在访问this时，因为闭包自己的活动对象会在初始化时自动产生一个this（闭包的调用对象），因此不会读取外部函数的this。arguments也一样。
        内存泄漏：
            function setEvent(){
                var ele = document.getElementById("id");
                ele.onclick = function(){
                    alert(ele.id);
                }
            }
            此时，因为匿名函数被作为事件响应调用，始终引用setEvent的活动对象，导致ele不能销毁。正确写法如下：
            function setEvent(){
                var ele = document.getElementById("id");
                var id = ele.id;
                ele.onclick = function(){
                    alert(id);
                    ele = null; //此语句销毁ele，否则匿名函数始终引用setEvent的整个活动对象，包含ele，导致ele不能销毁。
                }
            }
    模仿块级作用域：
        (function(){
            //执行语句
        })();
        这种形式成为私有作用域，是一个闭包，能否访问外部作用域的变量。
    私有变量：
        函数中定义的变量（参数、局部变量及内部函数）是私有变量，外部不能访问。
        特权方法：
            有权访问私有变量和私有函数的共有方法。例如：
                function MyObj(){
                    var name = "aa";
                    function getFalse(){
                        return false;
                    }
                    this.publicMethod = function{  //特权方法
                        alert(name);
                        return getFalse();
                    }
                }                
            特权方法可用于实现类似javabean的对象创建，隐藏private属性。例如：
                function Person(name){
                    this.getName = function(){
                        return name;
                    }
                    this.setName = function(value){
                        name = value;
                    }
                }
        静态私有变量：
            (function(){
                var name = "aaa";
                function getFalse(){
                    return false;
                }
                Person = function(){
                }; // 注意此处Person变量没有加“var”声明，并使用了函数式，这是为了让Person成为全局函数。
                Person.prototype.publicMethod = function{  //特权方法
                    alert(name);
                    return getFalse();
                }
            })();
        模块模式：
            var singleton = (function(){
                var privateInt = 0;
                function privateMethod(){
                    return false;
                };
                return {
                    publicInt: 3,
                    publicMethod: function(){
                        privateInt++;
                        return privateMethod();
                    }
                };
            })();
        增强模块模式：
            var singleton = function(){
                var privateInt = 0;
                var obj = new CustomType();
                obj.publicMethod = function(){
                    return privateInt++;
                };
                return obj;
            }(); //此时function不用包裹圆括号，因为函数表达式可以直接执行。

BOM：
    window对象：
        全局对象
        定义全局变量x和window属性window.x的行为差异：
            delete：
                window属性可以delete。全局变量不可以。
                    window.x = "aa";
                    var x = "aa";
            访问未定义的两者：
                window属性会返回undefined。
                全局变量会抛出错误。
        frame：
            每个frame包含一个window对象。
            所有框架window对象保存在frames数组中。从左到右，从上到下访问。
            window.name表示框架名。            
            top.frames始终是正确引用。
            top.frames[0]或者top.frames["frameName"]两种调用方式
        主window的parent和top都和window相等。
        self始终等于window。

