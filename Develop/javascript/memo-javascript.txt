javascript补全需要在用户目录设置.tern-config或者在项目根目录设置.tern-project文件。

ECMAScript区分大小写！

js标识符（命名可用字符）：
    第一个字符必须是字母、下划线或美元符号（$）。
    其它字符可以是字母、下划线、美元符号或数字。
    字母可以包含扩展的ASCII或UNICODE字母字符，但不推荐。

分号断句不一定必须，但最好不要省略。

{}：包裹代码块，把多条语句包括起来。

变量：
    js变量是松散类型的，即可以保存任何类型的数据。
    var标识局部变量声明。不加var则变成全局变量。（不推荐）

typeof:
    返回值（字符串）：
        undefined, boolean, string, number, object, function
    是操作符，可以加括号也可以不加，如：
        typeof 95
        typeof (95)
        typeof(95)
    特殊情况：
        typeof null = "object"
        typeof undefined = "undefined"
        typeof {正则表达式} = "function" 或
"object"，根据浏览器不同而定（主流为返回"object"。"function"多为老版本）

undefined及未声明：
    声明但未赋值：undefined
    undefined变量可操作，未声明变量只可以进行typeof操作，否则抛出错误。
    但是，typeof {未声明变量} = undefined。容易误解
    null == undefined

boolean：
    ECMAScript中所有类型的值都有与boolean值等价的值。任何类型的值都可以通过调用Boolean()，转型为bool值。

         Boolean()   |         true                           false
    -----------------|------------------------------------------------------------------------
         String      |         非空                           ""（空字符串，长度为0）
         Object      |         非空对象                       null
         undefined   |         NaN                            undefined
         Number      |         非零值（包含无穷大）           0和NaN

Number：
    八进制：
        数值前面+0：045 = 37
        数值本身超过限制，则解析为十进制：079 = 79
    十六进制：
        数值前+0x
        数值：0~9，A~F，a~f。可大小写
    小数：
        1.01及.01都有效。.01=0.01，但不推荐
        3.12e7 = 3.12*10^7
        小数计算极其不精确！不要用==判断！！0.1+0.2=0.300000000000004？？
    数值范围：
        Number.MIN_VALUE --
Number.MAX_VALUE，超出则为Infinity。可用isFinite()判断。
    NaN：
        表示操作数不能返回（例如0/0）的情况。此情况会返回NaN，而不是抛出错误停止程序。js程序仍能继续运行。
        1/0 = Infinity    -1/0 = - Infinity
        NaN的任何操作返回NaN，且 NaN != NaN
        isNaN()：
            判断是否能转成数值
              isNaN()    |        true                      false
            -------------|--------------------------------------------------------------------------
              String     |        "10"                      "aaa"
              Object     |        x.valueOf()是数值         x.valueOf()不是数值
              Boolean    |        true,false                -
              undefined  |        -                         NaN,undefined

数值转换：

     Number()                     |      转换结果
----------------------------------|------------------------------------------------------
     Boolean                      |      1,0
     Number                       |      不变
     null                         |      0
     undefined                    |      NaN
     String（只有数字）           |      可包含“+、-”及浮点“.”，前缀0省略。
     String（十六进制）           |      有效十六进制变成相应十进制整数。
     String（空，长度可大于0）    |      0
     String（其它）               |      NaN
     Object                       |      先通过valueOf()转换，转值。如果得到NaN，则通过toString()转换，再转值。

    parseInt()：
        只处理字符串
        字符串前面可以多个空白，但第一个非空字符必须是数字或“-”负号
        扫描连续数字，直到非数字字符串为止
        截取有意义的数字格式转化
        小数点后省略（不是四舍五入）
        能够识别八进制、十六进制（ECMAScript 5不能识别八进制，会变成十进制）
        不能识别的字符串，则得到NaN
        可用第二个参数指定基数
        例：
            "-1234blue" = -1234

    parseFloat()：
        和parseInt()行为类似，只是多读取一个浮点号“.”
        不能解析八进制，前缀0被省略
        不能解析十六进制，所有十六进制数返回0。
        没有第二个参数作为基数。
        字符串为整数时，返回整数

String：
    
