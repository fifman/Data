javascript补全需要在用户目录设置.tern-config或者在项目根目录设置.tern-project文件。

ECMAScript区分大小写！

js标识符（命名可用字符）：
    第一个字符必须是字母、下划线或美元符号（$）。
    其它字符可以是字母、下划线、美元符号或数字。
    字母可以包含扩展的ASCII或UNICODE字母字符，但不推荐。

分号断句不一定必须，但最好不要省略。

{}：包裹代码块，把多条语句包括起来。

变量：
    js变量是松散类型的，即可以保存任何类型的数据。
    var标识局部变量声明。不加var则变成全局变量。（不推荐）

typeof:
    返回值（字符串）：
        undefined, boolean, string, number, object, function
    是操作符，可以加括号也可以不加，如：
        typeof 95
        typeof (95)
        typeof(95)

       | typeof            | condition            | result
    ---|-------------------|----------------------|-------------------------------------------
       | Array             | -                    | "object"
       | null              | -                    | "object"
       | Function          | -                    | "function"
       | 正则表达式        | 根据浏览器不同       | "object"（主流）/"function"
       | undefined         | -                    | "undefined"

undefined及未声明：
    声明但未赋值：undefined
    undefined变量可操作，未声明变量只可以进行typeof操作，否则抛出错误。
    但是，typeof {未声明变量} = undefined。容易误解
    null == undefined

boolean：
    ECMAScript中所有类型的值都有与boolean值等价的值。任何类型的值都可以通过调用Boolean()，转型为bool值。

         Boolean()   |         true                           false
    -----------------|------------------------------------------------------------------------
         String      |         非空                           ""（空字符串，长度为0）
         Object      |         非空对象                       null
         undefined   |         NaN                            undefined
         Number      |         非零值（包含+-Infinity）           0和NaN

Number：
    八进制：
        数值前面+0：045 = 37
        数值本身超过限制，则解析为十进制：079 = 79
    十六进制：
        数值前+0x
        数值：0~9，A~F，a~f。可大小写
    小数：
        1.01及.01都有效。.01=0.01，但不推荐
        3.12e7 = 3.12*10^7
        小数计算极其不精确！不要用==判断！！0.1+0.2=0.300000000000004？？
    数值范围：
        Number.MIN_VALUE --
Number.MAX_VALUE，超出则为Infinity。可用isFinite()判断。
    NaN：
        表示操作数不能返回（例如0/0）的情况。此情况会返回NaN，而不是抛出错误停止程序。js程序仍能继续运行。
        1/0 = Infinity    -1/0 = - Infinity
        NaN的任何操作返回NaN，且 NaN != NaN
        isNaN()：
            判断是否能转成数值
              isNaN()    |        true                      false
            -------------|--------------------------------------------------------------------------
              String     |        "10"                      "aaa"
              Object     |        x.valueOf()是数值         x.valueOf()不是数值
              Boolean    |        true,false                -
              undefined  |        -                         NaN,undefined

数值转换：

     Number()                     |      转换结果
----------------------------------|------------------------------------------------------
     Boolean                      |      1,0
     Number                       |      不变
     null                         |      0
     undefined                    |      NaN
     String（只有数字）           |      可包含“+、-”及浮点“.”，前缀0省略。
     String（十六进制）           |      有效十六进制变成相应十进制整数。
     String（空，长度可大于0）    |      0
     String（其它）               |      NaN
     Object                       |      先通过valueOf()转换，转值。如果得到NaN，则通过toString()转换，再转值。

    parseInt()：
        只处理字符串
        字符串前面可以多个空白，但第一个非空字符必须是数字或“-”负号
        扫描连续数字，直到非数字字符串为止
        截取有意义的数字格式转化
        小数点后省略（不是四舍五入）
        能够识别八进制、十六进制（ECMAScript 5不能识别八进制，会变成十进制）
        不能识别的字符串，则得到NaN
        可用第二个参数指定基数
        例：
            "-1234blue" = -1234

    parseFloat()：
        和parseInt()行为类似，只是多读取一个浮点号“.”
        不能解析八进制，前缀0被省略
        不能解析十六进制，所有十六进制数返回0。
        没有第二个参数作为基数。
        字符串为整数时，返回整数

String：
    转义：  | 
------------|---------------------------------------------------------------------------------------
     \n     |      换行
     \t     |      制表
     \b     |      空格
     \r     |      回车
     \f     |      进纸
     \\     |      斜杠\
     \'     |      单引号
     \"     |      双引号
     \xnn   |      十六进制码nn表示的一个字符（n在0-F间），例如\x41="A"
     \unnnn |      十六进制代码表示的一个unicode字符

    length属性：
        如果字符串包含双字节字符，则length可能不会精确返回字符数目

    字符串是不可改变的。改变变量值会销毁原字符串。

    toString():
        Number, Bool, Object, String 有 toString()方法，null和undefined没有。
        参数：n进制基数，仅用于数值，返回n进制的数值字符串。例如10.toString(8)="12".
        转型函数String(x)：参数x有toString()方法时，调用。否则，返回null或者undefined。

Object：
    初始化：var x = new Object() 或者 var x = new Object，括号可省略但不推荐！
    方法：                               |
-----------------------------------------|----------------------------------------------------------
     Constructor                         |       保存创建当前对象的函数
     hasOwnProperty(propertyName)        |       属性在实例中是否存在
     isPrototypeOf(object)               |       object是否是调用对象的原型
     propertyIsEnumerable(propertyName)  |       检查给定属性是否能用for-in枚举
     toLocaleString()                    |       返回对象字符串表示
     toString()                          |       返回对象字符串表示
     valueOf()                           |       返回对象的字符串、数值、或bool值表示。

单元操作符：
    前置、后置++：
        前置++语句求值前优先执行，后置++语句求值后执行。
        ++和--可作用于所有值：
         ++                    |     对应数值                               |     计算结果
-------------------------------|--------------------------------------------|-----------------------
         Number                |     Number                                 |     Number+1
         true                  |     1                                      |     2
         false                 |     0                                      |     1
         "11"（数字字符串）    |     对应数字                               |     数字+1
         "xx"（非数字）        |     NaN                                    |     NaN
         对象obj               |     valueOf(obj)，等于NaN则用toString()    |     用前述规则计算转换后值

    一元操作符+、-：
        放在非数值前时，会执行Number()转换。
 
位操作：
    正负表示：
        32位整数
        首位为符号位，0为负，1为正。
        负数表示法为二进制补码，即 -x = ~x+1

    NaN和Infinity被当作0.
    非数值在位操作前会先用Number()转成数值。
    
    按位非（~）
        数的负值-1（二进制反码）
    按位与（&）
    按位或（|）
    按位异或（^）
    左移（<<）
        左移的空位用0补足。保留符号位。
    右移（>>）
        右移的空位用符号位补足。保留符号位。
    无符号右移（>>>）
            
bool操作：
    逻辑非（!）
        操作时会先把值用Boolean()转换
    逻辑或（||）、 逻辑与（&&）
        a如果为true，则b不执行。

        Boolean(a)             | b        | a && b   | a || b
-------------------------------|----------|----------|------------------------------------            
        Boolean(a)=true        | any      | b        | a
        Boolean(a)=false       | any      | a        | b

加减乘除：
    乘法：

         a                  | b                | a * b
----------------------------|------------------|--------------------------------------------
         Number             | Number           | Number或+-Infinity
         NaN                | any              | NaN
         Infinity           | 0                | NaN
         Infinity           | Number           | +-Infinity
         obj                | any              | Number(a) * b
    
    除法：

         a                  | b                | a / b
----------------------------|------------------|--------------------------------------------
         Number             | Number           | Number或+-Infinity
         NaN                | any              | NaN
         Number             | 0                | NaN
         Infinity           | Number           | NaN
         Infinity           | Infinity         | NaN
         obj                | any              | Number(a) / b

    加法：

         a                  | b                | a + b
----------------------------|------------------|--------------------------------------------
         Number             | Number           | Number或+-Infinity
         NaN                | any              | NaN
         Infinity           | -Infinity        | NaN
         Infinity           | Number           | +-Infinity
         obj                | any              | Number(a) + b
         +0                 | +0               | +0
         -0                 | -0               | -0
         +0                 | -0               | +0
         String             | any              | String(a) + b

    减法：

         a                  | b                | a - b
----------------------------|------------------|--------------------------------------------
         Number             | Number           | Number
         NaN                | any              | NaN
         Infinity           | -Infinity        | Infinity
         Infinity           | Infinity         | NaN
         obj及非Number      | any              | Number(a) + b
         +0                 | +0               | +0
         -0                 | -0               | +0
         -0                 | +0               | -0
         String             | any              | String(a) + b

关系操作符：
    数值比较大小
    字符串比较字符编码值
    一个操作数为数值，则另一个取Number()再比较
    一个操作数为对象，则先valueOf()，没有此方法时再toString()。
    布尔值转为数值再比较。
    和NaN比较永远返回false。

    相等操作符：
        相等：

       | a                    | b                 | 转换
-------|----------------------|-------------------|-----------------------------------------
       | boolean              | Number            | Boolean转Number
       | String               | Number            | String转Number
       | Object               | 非Object          | 调Object的valueOf()方法
       | null                 | undefined         | 相等，两者不能转换成任何值，即不等于其它任何值
       | NaN                  | any               | 不想等，即使b也为NaN。
       | Object               | Object            | 两个引用是否指向同一个Object

        全等：
            只在不转换前相等，才为true
            null !== undefined

语句：
    循环语句：
        语句的条件会用Boolean()转换。
        for：
            for语句的初始化表达式、控制表达式、循环后表达式都可选。for(;;){}是正确语法。
            执行了循环体，则必执行循环后表达式。
        for-in：
            for (var name in object){}
            如果object为null或undefined，可能抛错误。ECMAScript 5不抛错误。
        label：和循环语句配套使用。
        switch：
            switch (expression) {
                case value: statement
                    break;
                ...
                default: statement
            }
            省略break会导致执行下一条case。
            value可以是变量或者表达式。
        
    with:
        限定语句的作用域。(不推荐使用)

函数：
    function不能重名，不像java可以重载。后定义函数会覆盖前面的。
    arguments：
        可以通过arguments对象访问参数数组。类似数组的调用。（但arguments并不是Array的实例！）
        修改arguments会影响命名参数，但修改命名参数不会影响arguments。
        arguments的长度由传入的参数个数决定，而不是由定义的命名参数个数决定！因此，当arguments增加一个元素时，不会影响命名参数。
    命名参数：
        没传值的命名参数被赋值undefined。


变量、作用域、内存问题
    类型：
        字符串是基本类型！
        对象（包括数组）可以动态添加属性、方法 
        复制变量值：
            基本类型：值复制，相互独立
            引用类型（对象）：引用复制，相互影响。
                注意：虽然是复制引用，但实际上仍然是值传递！引用不会传递。即：
                    a=b
                    b={}
                    a!=b
                b的引用变了的话，a的引用不会变。

        instanceof：
            variable instanceof Constructor
            
            instanceof      type
            Array           Array
            正则表达式      RegExp
            
    执行环境、作用域：
        全局执行环境：
            网页：window对象
            程序退出、网页关闭才销毁
        函数执行环境：
            执行逻辑进入函数时，函数环境被push到环境栈；执行后，弹出。
        作用域链：
            try-catch，with可以延长作用域链
        js没有块级作用域！
        声明变量时使用“var”声明，则变量添加到最近的环境。如果不使用“var”声明，则添加到全局环境。
            变量被访问时才添加。
        
    垃圾回收：
        基本类型保存在栈，对象保存在堆。
        局部变量、对象会在程序退出局部执行环境时自动释放（“解除引用”）。
        全局变量和全局对象的属性在有必要的情况下，可显式“解除引用”：
            var globalVariable = new Object();
            ...
            globalVariable = null;
            通过将全局变量设为null，可以显式解除引用。

    引用类型（对象）：
        Object:
            表示法：
                new Object()
                {}
                {a:1, b:2} //最后不能加逗号。部分解析器可以识别，但不兼容
                {"a":1} // 属性可以加双引号
            方法：
                toLocaleString()
                toString()
                valueOf()
        Array：
            数组大小可动态调整。
            表示法：
                new Array()
                Array()  //可省略“new” 
                new Array(20)  //长为20
                new Array("a","b","c")  //元素为“a”，“b”，“c”
                ["a","b"]   //最后不要加逗号，不同解析器不兼容
                [,,]        //2或3个值为undefined的元素
            可对超出长度的index赋值，Index前的未赋值元素即为空值。

                方法值：
---------------------------------------|-----------------------------------------------------------
                toString()             | 逗号分隔字符串拼接
                valueOf()              | 数组本身
                toLocaleString()       | 调用数组中每一项的toLocaleString()方法，再拼接
                join()                 | 逗号分隔值
                push()                 | 栈推入，返回数组长度
                pop()                  | 栈弹出，返回弹出值
                shift()                | 队列出，返回移出值
                unshift()              | 队列前端入，返回长度
                reverse()              | 反转
                sort()                 | 排序，先调toString()，然后比较字符串。此时"5">"15"。
                                       | 可接收排序函数。arg1在arg2前则-1，后则+1，=则0
                concat()               | concat(a,b,c...)，入参为元素，加入。为数组，合并。返回副本。
                slice()                | 截取，不包含最后一项。返回副本。                                          
                splice()               | splice(startIndex, delNo, a, b, c ...)
                                       | startIndex：起始位置                                            
                                       | delNo：删除个数                                                 
                                       | a, b, c ...：在删除的位置上插入的元素                                   
                                       | 影响原数组，并返回被删除项组成的数组。
                indexof()              | indexOf(value, startIndex)：查找索引，无则返回-1。需要严格相等（全等）。
                lastIndexOf()          | 从末尾到前查找，其余和indexOf()相同。

            迭代：
                every(fn,obj)            对每一项执行fn，如果所有执行结果为true，则返回true。
                filter(fn,obj)           对每一项执行fn，返回执行结果为true的元素。
                forEach(fn,obj)                                                                                
                map(fn,obj)                                                                                
                some(fn,obj)                                                                                
        
        程序包含多个框架时，可存在多个全局执行环境。此时可能存在多个Array构造函数。
            instanceof Array 不一定取得正确的值
            Array.isArray(obj)可解决此问题，但并非所有浏览器都支持。


