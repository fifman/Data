后期绑定：

java默认后期绑定，调用方法时，实际调用的代码最后时刻才被确定。编译器确保方法存在并执行类型检查，但此时不知道确切代码。因此可以实现向上转型。
非面向对象编程使用前期绑定，编译器知道具体执行代码绝对地址。
c++默认前期绑定，使用virtual关键字才能实现后期绑定。

单根继承：

所有java类继承Object。c++则不是。

参数化类型（泛型）




对象标识符：

对象的引用。例如：
String s;
这里创建了一个对象标志符s，s为一个引用（没有指定对象，单独存在）。
创建数组对象实际上是创建了一个引用数组，每个引用被自动初始化为null。
也可以创建基本数据类型的数组。

存储位置：

寄存器：java不能直接控制。
堆栈：java对象不存储，对象引用在里面。
堆：所有java对象存储位置。

常量通常直接放在程序代码内部。
基本类型变量不是引用，直接存储值，放在堆栈中。
基本类型包装器类可在堆中创建对象。

java所有数值类型都有正负号
高精度数值类BigDecimal和BigInteger没有对应的基本类型。高精度支持任意精度。



作用域：
作用域由花括号{}决定。决定了内部定义的变量名（引用）的生命周期。
在作用域内创建的非基本对象的生命周期则不取决于作用域。

import:

java.lang自动导入