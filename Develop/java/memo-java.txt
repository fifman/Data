后期绑定：

java默认后期绑定，调用方法时，实际调用的代码最后时刻才被确定。编译器确保方法存在并执行类型检查，但此时不知道确切代码。因此可以实现向上转型。
非面向对象编程使用前期绑定，编译器知道具体执行代码绝对地址。
c++默认前期绑定，使用virtual关键字才能实现后期绑定。

单根继承：

所有java类继承Object。c++则不是。

参数化类型（泛型）




对象标识符：

对象的引用。例如：
String s;
这里创建了一个对象标志符s，s为一个引用（没有指定对象，单独存在）。
创建数组对象实际上是创建了一个引用数组，每个引用被自动初始化为null。
也可以创建基本数据类型的数组。

存储位置：

寄存器：java不能直接控制。
堆栈：java对象不存储，对象引用在里面。
堆：所有java对象存储位置。

常量通常直接放在程序代码内部。
基本类型变量不是引用，直接存储值，放在堆栈中。
基本类型包装器类可在堆中创建对象。

java所有数值类型都有正负号
高精度数值类BigDecimal和BigInteger没有对应的基本类型。高精度支持任意精度。



作用域：
作用域由花括号{}决定。决定了内部定义的变量名（引用）的生命周期。
在作用域内创建的非基本对象的生命周期则不取决于作用域。

操作符：

几乎所有操作符只能操作基本类型。但"="，"=="，"!=" 能操作所有对象。String支持"+"和"+="。

字符串转换：

"+"可以执行字符串转换。当a+b中，a为String类型，b非String时，会将b转成String。注意String类型必须在前面。

=号：

等号左边必须是已命名的变量。a=4, 不能4=a。右边必须能生成一个值。

值传递：

基本数值直接传递。传递双方可以继续操作、修改，互不受影响。对象值传递传递的是引用，传递双方会共享一个对象，修改会相互影响。


算数操作：

整数除法/会直接去掉小数位。

一元+号（表示正值）唯一的作用就是将较小类型的操作数提升为int。

对象比较：

"=="、"!="比较的是对象的引用。
Object.equals()默认行为是比较引用！但一些类里面覆盖了此行为（例如Integer）！

逻辑运算符短路：

条件1 && 条件2 && 条件3，如果条件2为false，则条件3不执行。


数值类型描述：

1.1D, 3L, 0.1F
有时候编译器默认类型不对，需要字符显式指定。

三元操作符ifelse

boolean ? v1 : v2

按位操作符：& |  逻辑操作符：&& ||



